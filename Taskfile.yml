version: '3'
output: 'prefixed'

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: go version | cut -d ' ' -f 3
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}
  # OS-specific build flags
  BUILD_FLAGS:
    sh: |
      if [ "$(uname)" = "Linux" ]; then
        echo "-ldflags '{{.LDFLAGS}}'"
      elif [ "$(uname)" = "Windows_NT" ]; then
        echo "-ldflags '-H windowsgui {{.LDFLAGS}}'"
      else
        echo "-ldflags '{{.LDFLAGS}}'"
      fi

tasks:
  default:
    cmds:
      - task: install
      - task: build
      - task: run

  install:
    desc: Install all dependencies
    deps: [install:go]

  install:go:
    desc: Install Go dependencies
    cmds:
      - go mod download
      - go mod tidy

  build:
    desc: Build the application
    deps: [lint]
    cmds:
      - |
        export CGO_ENABLED=1
        export CGO_CFLAGS="-I/usr/include/webkitgtk-4.0"
        export CGO_LDFLAGS="-lwebkit2gtk-4.0"
        if [ "$(uname)" = "Linux" ]; then
          go build -tags webview_gtk {{.BUILD_FLAGS}} -o bin/server main.go
        elif [ "$(uname)" = "Windows_NT" ]; then
          go build -tags webview_windows {{.BUILD_FLAGS}} -o bin/server main.go
        else
          go build -tags webview_cocoa {{.BUILD_FLAGS}} -o bin/server main.go
        fi

  run:
    desc: Run the application
    cmds:
      - ./bin/server

  dev:
    desc: Run development environment
    deps: [install]
    cmds:
      - go run main.go

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/ uploads/

  lint:
    desc: Run all linters
    deps: [lint:backend, lint:frontend]

  lint:backend:
    desc: Run linters for Go code
    cmds:
      - go fmt ./...
      - go vet ./...
      - golangci-lint run ./...

  lint:frontend:
    desc: Run linters for frontend code
    cmds:
      - echo "Frontend linting not configured yet"

  lint:fix:
    desc: Fix all linting issues
    deps: [lint:fix:backend, lint:fix:frontend]

  lint:fix:backend:
    desc: Fix linting issues in Go code
    cmds:
      - go fmt ./...

  lint:fix:frontend:
    desc: Fix linting issues in frontend code
    cmds:
      - echo "Frontend lint fixing not configured yet"

  test:
    desc: Run all tests
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html 