version: '3'

vars:
  VERSION: git describe --tags --always --dirty
  BUILD_TIME: Get-Date -Format yyyy-MM-dd_HH:mm:ss
  GIT_COMMIT: git rev-parse HEAD
  GO_VERSION: '(go version).Split(\" \")[2]'

  BIN_DIR: "bin"
  FRONTEND_DIR: "webview"
  UPLOAD_DIR: "uploads"
  MAIN_PACKAGE: "main.go"
  DIST_DIR: "static/dist"

  LDFLAGS: "-s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}"

output: prefixed
silent: false

includes:
  windows: Taskfile.windows.yml
  linux: Taskfile.linux.yml

tasks:
  default:
    desc: Install dependencies, build, and run the application
    cmds:
    - task deps
    - task build
    - task test
    - task lint

  deps:
    desc: Install all dependencies
    deps: [ deps:go, deps:frontend ]

  deps:go:
    desc: Install Go dependencies
    cmds:
    - go mod download
    - go mod tidy

  deps:frontend:
    desc: Install frontend dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
    - npm install --legacy-peer-deps

  build:
    desc: Build the application
    cmds:
    - cd webview && npm run build
    - go build -o bin/ojivid.exe

  run:
    desc: Run application
    cmds:
    - ./bin/ojivid.exe

  dev:
    desc: Run development server
    cmds:
    - go run main.go
    env:
      DEV: "1"
      VITE_API_URL: "http://localhost:8080"

  dev:frontend:
    desc: Run frontend with hot reloading
    dir: "{{.FRONTEND_DIR}}"
    cmds:
    - npm run dev

  dev:backend:
    desc: Run backend in development mode
    cmds:
    - go run {{.MAIN_PACKAGE}}

  test:
    desc: Run tests
    cmds:
    - go test -v -race ./...

  lint:
    desc: Run all linters
    deps: [ lint:backend, lint:frontend ]

  lint:backend:
    desc: Lint Go code
    cmds:
    - go fmt ./...
    - go vet ./...
    - golangci-lint run ./...

  lint:frontend:
    desc: Lint frontend code
    dir: "{{.FRONTEND_DIR}}"
    cmds:
    - npm run lint

  clean:
    desc: Clean build artifacts
    cmds:
    - rm -rf webview/dist
    - rm -rf bin
