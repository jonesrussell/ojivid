version: '3'
output: 'prefixed'

vars:
  VERSION:
    sh: git describe --tags --always --dirty
  BUILD_TIME:
    sh: powershell -Command "Get-Date -Format 'yyyy-MM-dd_HH:mm:ss'"
  GIT_COMMIT:
    sh: git rev-parse HEAD
  GO_VERSION:
    sh: powershell -Command "(go version).Split(' ')[2]"
  LDFLAGS: -s -w -X main.version={{.VERSION}} -X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}} -X main.goVersion={{.GO_VERSION}}

tasks:
  default:
    cmds:
      - task: install
      - task: build
      - task: run

  install:
    desc: Install all dependencies
    deps: [install:go, install:frontend]

  install:go:
    desc: Install Go dependencies
    cmds:
      - go mod download
      - go mod tidy

  install:frontend:
    desc: Install frontend dependencies
    cmds:
      - npm install
      - npm install -D vite @vitejs/plugin-react

  build:windows:
    platforms: [windows]
    cmds:
    - >-
      go build -ldflags "-H windowsgui -s -w
      -X main.version={{.VERSION}}
      -X main.buildTime={{.BUILD_TIME}}
      -X main.gitCommit={{.GIT_COMMIT}}
      -X main.goVersion={{.GO_VERSION}}"
      -o bin\\server.exe main.go

  build:
    desc: Build the application
    deps: [lint, build:frontend]
    cmds:
      - go build -o bin/server main.go
        
  build:frontend:
    desc: Build frontend assets
    cmds:
      - npm run build

  run:
    desc: Run the application
    cmds:
      - bin\\server.exe

  dev:
    desc: Run development environment
    deps: [dev:backend, dev:frontend]

  dev:backend:
    desc: Run backend in development mode
    cmds:
      - go run main.go

  dev:frontend:
    desc: Run frontend development server
    cmds:
      - npm run dev

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/ uploads/ dist/ node_modules/

  lint:
    desc: Run all linters
    deps: [lint:backend, lint:frontend]

  lint:backend:
    desc: Run linters for Go code
    cmds:
      - go fmt ./...
      - go vet ./...
      - golangci-lint run ./...

  lint:frontend:
    desc: Run linters for frontend code
    cmds:
      - npm run lint

  lint:fix:
    desc: Fix all linting issues
    deps: [lint:fix:backend, lint:fix:frontend]

  lint:fix:backend:
    desc: Fix linting issues in Go code
    cmds:
      - go fmt ./...

  lint:fix:frontend:
    desc: Fix linting issues in frontend code
    cmds:
      - npm run lint:fix

  test:
    desc: Run all tests
    cmds:
      - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html 