---
description: 
globs: 
alwaysApply: false
---
# Webview Implementation

The application uses [webview_go](mdc:https:/github.com/webview/webview_go) to create a desktop window that hosts the web application.

## Key Components

### Window Configuration
- Default window size: 1280x720 pixels
- Window title: "Ojiosk"
- Uses webview's native window hints
- Supports development and production modes

### Development Mode
- Loads from `http://localhost:3000` when `DEV=1`
- Enables hot module reloading
- Provides debug panel with `?debug=true`

### Production Mode
- Loads from local file system
- Searches for `splash.html` in multiple locations:
  - `webview/dist/splash.html`
  - `dist/splash.html`
  - `static/dist/splash.html`
  - Executable directory
- Falls back to local server if file not found

### JavaScript Integration
The webview implementation includes several JavaScript utilities:

1. Environment Checking
   - Detects platform and user agent
   - Checks for development mode
   - Provides debug information

2. Media Access
   - Camera device management
   - Video stream handling
   - Error handling and diagnostics

### Implementation Details
- Located in [webview/app.go](mdc:webview/app.go)
- Uses Go's webview bindings for native window creation
- Implements proper error handling and logging
- Supports both development and production environments
- Handles file system and network fallbacks

## Usage
The webview is initialized in the main application and serves as the primary interface for the desktop application. It loads the frontend application from either:
- Local development server (development mode)
- Built assets (production mode)
- Fallback server (if assets not found)

